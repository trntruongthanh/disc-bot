const {
  Client,
  Interaction,
  ApplicationCommandOptionType,
  AttachmentBuilder,
} = require("discord.js");

const calculateLevelXp = require("../../utils/calculateLevelXp");

const { Font, RankCardBuilder } = require("canvacord");

const Level = require("../../models/Level");

// console.log(RankCardBuilder);
// console.log(Object.getOwnPropertyNames(RankCardBuilder.prototype));   // c√°c ph∆∞∆°ng th·ª©c c√≥ s·∫µn trong RankCardBuilder:
/*
  Tr·∫£ v·ªÅ ID c·ªßa ng∆∞·ªùi d√πng ƒë√£ th·ª±c hi·ªán l·ªánh trong server.
  interaction.member l√† m·ªôt ƒë·ªëi t∆∞·ª£ng GuildMember, ƒë·∫°i di·ªán cho ng∆∞·ªùi g·ªçi l·ªánh trong server hi·ªán t·∫°i.
  interaction.member.id l√† m·ªôt chu·ªói ch·ª©a ID c·ªßa ng∆∞·ªùi g·ªçi l·ªánh.

  T√¨m ki·∫øm v√† l·∫•y th√¥ng tin chi ti·∫øt v·ªÅ m·ªôt th√†nh vi√™n trong server d·ª±a tr√™n ID.
  fetch(targetUserId) s·∫Ω truy v·∫•n d·ªØ li·ªáu t·ª´ Discord API n·∫øu th√¥ng tin ch∆∞a c√≥ s·∫µn trong b·ªô nh·ªõ cache c·ªßa bot.
  Tr·∫£ v·ªÅ m·ªôt Promise, do ƒë√≥ c·∫ßn await ƒë·ªÉ ƒë·ª£i k·∫øt qu·∫£.
  K·∫øt qu·∫£ l√† m·ªôt ƒë·ªëi t∆∞·ª£ng GuildMember, c√≥ nhi·ªÅu th√¥ng tin h∆°n ch·ªâ ID.
*/

module.exports = {
  /**
   *
   * @param {Client} client
   * @param {Interaction} interaction
   */
  callback: async (client, interaction) => {
    if (!interaction.inGuild()) {
      interaction.reply("You can only run this command inside a server.");
      return;
    }

    /*
      T√≥m t·∫Øt:
      deferReply(): Ho√£n tr·∫£ l·ªùi ƒë·ªÉ bot c√≥ th·ªÉ x·ª≠ l√Ω l√¢u d√†i, tr√°nh vi·ªác ph·∫£n h·ªìi ngay l·∫≠p t·ª©c.
      mentionedUserId: Ki·ªÉm tra n·∫øu ng∆∞·ªùi g·ªçi l·ªánh c√≥ mention m·ªôt ng∆∞·ªùi d√πng, v√† l·∫•y ID c·ªßa ng∆∞·ªùi d√πng ƒë√≥.
      targetUserId: N·∫øu kh√¥ng mention ng∆∞·ªùi d√πng, s·ª≠ d·ª•ng ID c·ªßa ng∆∞·ªùi g·ªçi l·ªánh.
      targetUserObj: Truy xu·∫•t ƒë·ªëi t∆∞·ª£ng GuildMember c·ªßa ng∆∞·ªùi d√πng m·ª•c ti√™u t·ª´ server.
    */

    // deferReply() l√† m·ªôt ph∆∞∆°ng th·ª©c trong Discord.js ƒë∆∞·ª£c s·ª≠ d·ª•ng khi bot c·∫ßn th·ªùi gian ƒë·ªÉ x·ª≠ l√Ω l·ªánh nh∆∞ng v·∫´n mu·ªën b√°o cho ng∆∞·ªùi d√πng bi·∫øt r·∫±ng bot ƒëang l√†m vi·ªác v√† ch∆∞a tr·∫£ l·ªùi ngay l·∫≠p t·ª©c.
    await interaction.deferReply();

    const mentionedUserId = interaction.options.get("target-user")?.value;

    /*
      const targetUserId = mentionedUserId || interaction.member.id;
      mentionedUserId || interaction.member.id: D√≤ng n√†y s·∫Ω x√°c ƒë·ªãnh ID c·ªßa ng∆∞·ªùi d√πng m·ª•c ti√™u (ng∆∞·ªùi d√πng m√† l·ªánh s·∫Ω ki·ªÉm tra c·∫•p ƒë·ªô).
      N·∫øu ng∆∞·ªùi g·ªçi l·ªánh ƒë√£ mention m·ªôt ng∆∞·ªùi d√πng (c√≥ mentionedUserId), th√¨ s·∫Ω s·ª≠ d·ª•ng ID c·ªßa ng∆∞·ªùi ƒë√≥.
      N·∫øu kh√¥ng, s·∫Ω s·ª≠ d·ª•ng ID c·ªßa ch√≠nh ng∆∞·ªùi g·ªçi l·ªánh (interaction.member.id), t·ª©c l√† ID c·ªßa ng∆∞·ªùi ƒë√£ th·ª±c hi·ªán l·ªánh trong server (guild).
      ƒê√¢y l√† c√°ch ƒë·ªÉ x√°c ƒë·ªãnh ng∆∞·ªùi d√πng m√† bot s·∫Ω ki·ªÉm tra c·∫•p ƒë·ªô, t√πy thu·ªôc v√†o vi·ªác ng∆∞·ªùi g·ªçi c√≥ mention ai hay kh√¥ng.
    */
    const targetUserId = mentionedUserId || interaction.member.id;

    /*
      interaction.guild.members.fetch(targetUserId): ƒê√¢y l√† m·ªôt h√†nh ƒë·ªông b·∫•t ƒë·ªìng b·ªô d√πng ƒë·ªÉ l·∫•y ƒë·ªëi t∆∞·ª£ng GuildMember cho ng∆∞·ªùi d√πng c√≥ ID targetUserId trong server (guild) hi·ªán t·∫°i.
      guild.members.fetch() tr·∫£ v·ªÅ m·ªôt Promise v√† do ƒë√≥ c·∫ßn ph·∫£i d√πng await ƒë·ªÉ ƒë·ª£i k·∫øt qu·∫£.
      K·∫øt qu·∫£ tr·∫£ v·ªÅ l√† m·ªôt ƒë·ªëi t∆∞·ª£ng GuildMember, ch·ª©a nhi·ªÅu th√¥ng tin chi ti·∫øt v·ªÅ ng∆∞·ªùi d√πng trong server, v√≠ d·ª• nh∆∞ t√™n ng∆∞·ªùi d√πng, tr·∫°ng th√°i, vai tr√≤, v√† c√°c thu·ªôc t√≠nh kh√°c.
      targetUserObj: ƒê√¢y l√† ƒë·ªëi t∆∞·ª£ng GuildMember c·ªßa ng∆∞·ªùi d√πng m√† b·∫°n ƒëang mu·ªën l·∫•y th√¥ng tin (c√≥ th·ªÉ l√† ng∆∞·ªùi g·ªçi l·ªánh ho·∫∑c ng∆∞·ªùi ƒë∆∞·ª£c mention).
    */
    const targetUserObj = await interaction.guild.members.fetch(targetUserId);

    /*
      Level.findOne({...}): Truy v·∫•n MongoDB ƒë·ªÉ t√¨m m·ªôt t√†i li·ªáu (document) trong b·∫£ng Level kh·ªõp v·ªõi ƒëi·ªÅu ki·ªán ƒë∆∞·ª£c cung c·∫•p.
      ƒêi·ªÅu ki·ªán t√¨m ki·∫øm:
      userId: targetUserId: T√¨m c·∫•p ƒë·ªô c·ªßa ng∆∞·ªùi d√πng c√≥ ID targetUserId (ID c·ªßa ng∆∞·ªùi ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p ho·∫∑c ng∆∞·ªùi g·ªçi l·ªánh).
      guildId: interaction.guild.id: ƒê·∫£m b·∫£o ch·ªâ l·∫•y d·ªØ li·ªáu trong server m√† l·ªánh ƒë∆∞·ª£c ch·∫°y.
      await: V√¨ truy v·∫•n l√† m·ªôt thao t√°c b·∫•t ƒë·ªìng b·ªô, await ƒë·∫£m b·∫£o bot ch·ªù l·∫•y d·ªØ li·ªáu tr∆∞·ªõc khi ti·∫øp t·ª•c.
      üëâ N·∫øu ng∆∞·ªùi d√πng ƒë√£ t·ª´ng t√≠ch l≈©y XP v√† c·∫•p ƒë·ªô trong server, bi·∫øn fetchedLevel s·∫Ω ch·ª©a th√¥ng tin c·ªßa h·ªç.
    */
    const fetchedLevel = await Level.findOne({
      userId: targetUserId,
      guildId: interaction.guild.id,
    });

    if (!fetchedLevel) {
      interaction.editReply(
        mentionedUserId
          ? `${targetUserObj.user.tag} doesn't have any levels yet. Try again when they chat a little more.`
          : "You don't have any levels yet. Chat a little more and try again."
      );
      return;
    }

    /*
      T√¨m t·∫•t c·∫£ b·∫£n ghi (document) trong MongoDB thu·ªôc v·ªÅ server (guildId).
      guildId: interaction.guild.id l·ªçc k·∫øt qu·∫£ sao cho ch·ªâ l·∫•y d·ªØ li·ªáu c·ªßa server (guild) hi·ªán t·∫°i.  
      .select("userId level xp")	‚úÖ	Ch·ªâ l·∫•y userId, level, xp
      .select("-_id -xp")	‚úÖ	Lo·∫°i _id v√† xp, gi·ªØ t·∫•t c·∫£ tr∆∞·ªùng kh√°c
      .select("-_id userId level xp")	‚úÖ	Lo·∫°i _id, gi·ªØ userId, level, xp
      .select("-_id userId -xp")	‚ùå	Kh√¥ng th·ªÉ v·ª´a ch·ªçn userId v·ª´a lo·∫°i xp
    */
    let allLevels = await Level.find({ guildId: interaction.guild.id }).select(
      "-_id userId level xp"
    );

    /*
      H√†m .sort() trong JavaScript d√πng ƒë·ªÉ s·∫Øp x·∫øp m·ªôt m·∫£ng. N√≥ nh·∫≠n v√†o m·ªôt h√†m so s√°nh compareFunction(a, b), trong ƒë√≥:
      N·∫øu tr·∫£ v·ªÅ s·ªë √¢m (< 0) ‚Üí a ƒë·ª©ng tr∆∞·ªõc b.
      N·∫øu tr·∫£ v·ªÅ s·ªë d∆∞∆°ng (> 0) ‚Üí b ƒë·ª©ng tr∆∞·ªõc a.
      N·∫øu tr·∫£ v·ªÅ 0 ‚Üí Gi·ªØ nguy√™n th·ª© t·ª±.
      if-else v·ªõi return 1 / -1
      a - b (tƒÉng d·∫ßn), b - a (gi·∫£m d·∫ßn)
    */
    allLevels.sort((a, b) => {
      if (a.level === b.level) {
        return b.xp - a.xp;
      } else {
        return b.level - a.level;
      }
    });

    /*
      findIndex((lvl) => lvl.userId === targetUserId):
      T√¨m v·ªã tr√≠ c·ªßa targetUserId trong danh s√°ch allLevels.
      Ch·ªâ s·ªë (index) b·∫Øt ƒë·∫ßu t·ª´ 0, n√™n c·∫ßn +1 ƒë·ªÉ c√≥ th·ª© h·∫°ng th·ª±c t·∫ø.
    */
    let currentRank =
      allLevels.findIndex((lvl) => lvl.userId === targetUserId) + 1;

    Font.loadDefault();

    const card = new RankCardBuilder()
      .setAvatar(targetUserObj.user.displayAvatarURL({ size: 256 }))
      .setRank(currentRank)
      .setLevel(fetchedLevel.level)
      .setCurrentXP(fetchedLevel.xp)
      .setRequiredXP(calculateLevelXp(fetchedLevel.level))
      .setStatus(targetUserObj.presence?.status ?? "offline")
      .setUsername(targetUserObj.user.username)
      .setTextStyles({
        level: "LEVEL",
        xp: "EXP",
        rank: "RANK",
      })
      .setStyles({
        progressbar: {
          thumb: {
            style: {
              backgroundColor: "#FFD700",
            },
          },
        },
      });

    const image = await card.build({ format: "png" });
    const attachment = new AttachmentBuilder(image);
    interaction.editReply({ files: [attachment] });

    // console.log(card);
  },

  name: "level",
  description: "Shows your/someone's level.",
  options: [
    {
      name: "target-user",
      description: "The user whose level you want to see.",
      type: ApplicationCommandOptionType.Mentionable,
    },
  ],
};
